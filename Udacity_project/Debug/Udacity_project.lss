
Udacity_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800068  00800068  00000862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169f  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a47  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5b  00000000  00000000  00002b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00003874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069e  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f0b  00000000  00000000  000041f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000050fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  8a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <normal_Mode>:
	}
	
	
}
void normal_Mode()
{
  92:	cf 93       	push	r28
	// put car state GREEN
	carState = CAR_GREEN;
  94:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <carState>
	
	
	// TURN ON GREEN in NORMAL MODE
	LED_on(PORT_A,0);
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	81 e4       	ldi	r24, 0x41	; 65
  9c:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
	//TURN ON RED IN pedestrian Mode
	LED_on(PORT_B,2);
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	82 e4       	ldi	r24, 0x42	; 66
  a4:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
	//  WAIT 5S
	dely_5s();
  a8:	0e 94 b2 03 	call	0x764	; 0x764 <dely_5s>
	
	
	// put car state YELLOW
	carState = CAR_YELLOW;
  ac:	c1 e0       	ldi	r28, 0x01	; 1
  ae:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <carState>
	
	
	dely_5s_2LED(1,1,PORT_A,PORT_B);
  b2:	22 e4       	ldi	r18, 0x42	; 66
  b4:	41 e4       	ldi	r20, 0x41	; 65
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 39 01 	call	0x272	; 0x272 <dely_5s_2LED>
	
	
	// TURN OFF GREEN in NORMAL MODE
	LED_off(PORT_A,0);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	81 e4       	ldi	r24, 0x41	; 65
  c2:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	// TURN OFF RED in pedestrian Mode
	LED_off(PORT_B,2);
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	82 e4       	ldi	r24, 0x42	; 66
  ca:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	
	
	// put car state RED
	carState = CAR_RED;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <carState>
	
	// TURN ON RED in NORMAL MODE
	LED_on(PORT_A,2);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
	// TURN ON GREEN IN PEDESTRIAN MODE
	LED_on(PORT_B,0);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	82 e4       	ldi	r24, 0x42	; 66
  e0:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
	
		
	// WAIT 5 SECOND
	dely_5s();
  e4:	0e 94 b2 03 	call	0x764	; 0x764 <dely_5s>
	
	
	// put car state YELLOW
	carState = CAR_YELLOW;
  e8:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <carState>
	
	// TOGGLE YELLOW
	dely_5s_2LED(1,1,PORT_A,PORT_B);
  ec:	22 e4       	ldi	r18, 0x42	; 66
  ee:	41 e4       	ldi	r20, 0x41	; 65
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 39 01 	call	0x272	; 0x272 <dely_5s_2LED>
	
	
	// TURN OFF RED in NORMAL MODE
	LED_off(PORT_A,2);
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	// TURN OFF GREEN IN PEDESTRIAN MODE
	LED_off(PORT_B,0);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	82 e4       	ldi	r24, 0x42	; 66
 104:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	
	
	
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <AppStart>:


void AppStart()
{
	//initialized led in port A
	LED_inti(PORT_A,0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 16 01 	call	0x22c	; 0x22c <LED_inti>
	LED_inti(PORT_A,1);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 16 01 	call	0x22c	; 0x22c <LED_inti>
	LED_inti(PORT_A,2);
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 16 01 	call	0x22c	; 0x22c <LED_inti>
	
	
	//initialized led in port B
	LED_inti(PORT_B,0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	82 e4       	ldi	r24, 0x42	; 66
 128:	0e 94 16 01 	call	0x22c	; 0x22c <LED_inti>
	LED_inti(PORT_B,1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	0e 94 16 01 	call	0x22c	; 0x22c <LED_inti>
	LED_inti(PORT_B,2);
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 16 01 	call	0x22c	; 0x22c <LED_inti>
	
	//INTRRUPT
	sei();
 13c:	78 94       	sei
	External_Interrupt_Init(&ixt_0);
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 2c 03 	call	0x658	; 0x658 <External_Interrupt_Init>
	External_Interrupt_Call_Back(&ixt_0);
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 3c 03 	call	0x678	; 0x678 <External_Interrupt_Call_Back>
	
	while(1)
	{
		normal_Mode();
 14e:	0e 94 49 00 	call	0x92	; 0x92 <normal_Mode>
 152:	fd cf       	rjmp	.-6      	; 0x14e <AppStart+0x42>

00000154 <off_all_led>:
	
}

void off_all_led()
{
	LED_off(PORT_A,0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	LED_off(PORT_A,1);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	LED_off(PORT_A,2);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	
	LED_off(PORT_B,0);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	82 e4       	ldi	r24, 0x42	; 66
 170:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	LED_off(PORT_B,1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	82 e4       	ldi	r24, 0x42	; 66
 178:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	LED_off(PORT_B,2);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
 184:	08 95       	ret

00000186 <pedestrianMode>:
	
	
}
void pedestrianMode()
{
	off_all_led();
 186:	0e 94 aa 00 	call	0x154	; 0x154 <off_all_led>
	if(carState == 0 || carState == 1 )
 18a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <carState>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	08 f5       	brcc	.+66     	; 0x1d4 <pedestrianMode+0x4e>
	{
		// turn on pedestrian red led
		LED_on(PORT_B,2);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
		// turn on car green led 
		LED_on(PORT_A,0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
		
		
		//toggle yellow led for 5s
		dely_5s_2LED(1,1,PORT_A,PORT_B);
 1a2:	22 e4       	ldi	r18, 0x42	; 66
 1a4:	41 e4       	ldi	r20, 0x41	; 65
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 39 01 	call	0x272	; 0x272 <dely_5s_2LED>
		
		// turn off pedestrian red led
		LED_off(PORT_B,2);
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
		// turn off car green led
		LED_off(PORT_A,0);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
		
		
		// cars' Red LED and pedestrian Green LEDs are on for five seconds
		LED_on(PORT_A,2);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
		LED_on(PORT_B,0);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
		dely_5s();
 1ce:	0e 94 b2 03 	call	0x764	; 0x764 <dely_5s>
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <pedestrianMode+0x66>
		
		
	}
	//if interrupt when car red is turn on
	else if (carState == 2)
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	51 f4       	brne	.+20     	; 0x1ec <pedestrianMode+0x66>
	{
		// the pedestrian's Green LED and the cars' Red LEDs will be on for five seconds
		LED_on(PORT_A,2);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
		LED_on(PORT_B,0);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
		dely_5s();
 1e8:	0e 94 b2 03 	call	0x764	; 0x764 <dely_5s>
		
	}
	
	
	// turn off car red led 
	LED_off(PORT_A,2);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	
	//toggle yellow led for 5s
	dely_5s_2LED(1,1,PORT_A,PORT_B);
 1f4:	22 e4       	ldi	r18, 0x42	; 66
 1f6:	41 e4       	ldi	r20, 0x41	; 65
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 39 01 	call	0x272	; 0x272 <dely_5s_2LED>
	
	// pedestrian's Green LED is still on
	LED_on(PORT_B,0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
	
	// delay 5s
	dely_5s();
 208:	0e 94 b2 03 	call	0x764	; 0x764 <dely_5s>
	
	//  pedestrian Green LED will be off
	LED_off(PORT_B,0);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	82 e4       	ldi	r24, 0x42	; 66
 210:	0e 94 28 01 	call	0x250	; 0x250 <LED_off>
	
	//pedestrian Red LED and the cars' Green LED turn on
	LED_on(PORT_B,2);
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
	LED_on(PORT_A,0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_on>
 224:	08 95       	ret

00000226 <callBack>:
	.external_Interrupt_0_Request = callBack
};

void callBack()
{
	pedestrianMode();
 226:	0e 94 c3 00 	call	0x186	; 0x186 <pedestrianMode>
 22a:	08 95       	ret

0000022c <LED_inti>:
 */ 

#include "led.h"

EN_errorReturn_t LED_inti(uint8_t ledPort, uint8_t ledPin)
{
 22c:	98 2f       	mov	r25, r24
 22e:	86 2f       	mov	r24, r22
	if(DIO_init(ledPin,ledPort,OUT) == 0)
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	69 2f       	mov	r22, r25
 234:	0e 94 93 01 	call	0x326	; 0x326 <DIO_init>
 238:	81 11       	cpse	r24, r1
	{
		return ok;
	}
	else
	{
		return error;
 23a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 23c:	08 95       	ret

0000023e <LED_on>:


EN_errorReturn_t LED_on(uint8_t ledPort, uint8_t ledPin)
{
 23e:	98 2f       	mov	r25, r24
 240:	86 2f       	mov	r24, r22
	
	if(DIO_write(ledPin,ledPort, HIGH) == 0)
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	69 2f       	mov	r22, r25
 246:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_write>
 24a:	81 11       	cpse	r24, r1
	{
		return ok;
	}
	else
	{
		return error;
 24c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 24e:	08 95       	ret

00000250 <LED_off>:


EN_errorReturn_t LED_off(uint8_t ledPort, uint8_t ledPin)
{
 250:	98 2f       	mov	r25, r24
 252:	86 2f       	mov	r24, r22
	if(DIO_write(ledPin,ledPort, LOW) == 0)
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	69 2f       	mov	r22, r25
 258:	0e 94 1e 02 	call	0x43c	; 0x43c <DIO_write>
 25c:	81 11       	cpse	r24, r1
	{
		return ok;
	}
	else
	{
		return error;
 25e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 260:	08 95       	ret

00000262 <LED_toggle>:
EN_errorReturn_t LED_toggle(uint8_t ledPort, uint8_t ledPin)
{
 262:	98 2f       	mov	r25, r24
 264:	86 2f       	mov	r24, r22
	
	if(DIO_toggle(ledPin,ledPort) == 0)
 266:	69 2f       	mov	r22, r25
 268:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_toggle>
 26c:	81 11       	cpse	r24, r1
	{
		return ok;
	}
	else
	{
		return error;
 26e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 270:	08 95       	ret

00000272 <dely_5s_2LED>:

void dely_5s_2LED(uint8_t pinNumber_1,uint8_t pinNumber_2,uint8_t portNumber_1,uint8_t portNumber_2)
{
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	e8 2e       	mov	r14, r24
 280:	f6 2e       	mov	r15, r22
 282:	04 2f       	mov	r16, r20
 284:	12 2f       	mov	r17, r18
	CLR_BIT(TCCR0,WGM00);
 286:	83 b7       	in	r24, 0x33	; 51
 288:	8f 7b       	andi	r24, 0xBF	; 191
 28a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
 28c:	83 b7       	in	r24, 0x33	; 51
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	83 bf       	out	0x33, r24	; 51
	
	//SET PRESCALLER
	startTimer(T0,8);
 292:	28 e0       	ldi	r18, 0x08	; 8
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	cb 01       	movw	r24, r22
 2a0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <startTimer>
	
	//initial value
	TCNT0 = 56;
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	82 bf       	out	0x32, r24	; 50
	
	for (uint16_t i=0;  i <25000; i++)
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	2c c0       	rjmp	.+88     	; 0x306 <dely_5s_2LED+0x94>
	{
		while(TCNT0);
 2ae:	82 b7       	in	r24, 0x32	; 50
 2b0:	81 11       	cpse	r24, r1
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <dely_5s_2LED+0x3c>
		if((i % 2500) == 0) 
 2b4:	9e 01       	movw	r18, r28
 2b6:	36 95       	lsr	r19
 2b8:	27 95       	ror	r18
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	a7 e3       	ldi	r26, 0x37	; 55
 2c0:	ba e1       	ldi	r27, 0x1A	; 26
 2c2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__umulhisi3>
 2c6:	00 24       	eor	r0, r0
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	00 1c       	adc	r0, r0
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	00 1c       	adc	r0, r0
 2d4:	89 2f       	mov	r24, r25
 2d6:	90 2d       	mov	r25, r0
 2d8:	44 ec       	ldi	r20, 0xC4	; 196
 2da:	59 e0       	ldi	r21, 0x09	; 9
 2dc:	84 9f       	mul	r24, r20
 2de:	90 01       	movw	r18, r0
 2e0:	85 9f       	mul	r24, r21
 2e2:	30 0d       	add	r19, r0
 2e4:	94 9f       	mul	r25, r20
 2e6:	30 0d       	add	r19, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	c2 17       	cp	r28, r18
 2ec:	d3 07       	cpc	r29, r19
 2ee:	41 f4       	brne	.+16     	; 0x300 <dely_5s_2LED+0x8e>
		{
			LED_toggle(portNumber_1,pinNumber_1);
 2f0:	6e 2d       	mov	r22, r14
 2f2:	80 2f       	mov	r24, r16
 2f4:	0e 94 31 01 	call	0x262	; 0x262 <LED_toggle>
			LED_toggle(portNumber_2,pinNumber_2);	
 2f8:	6f 2d       	mov	r22, r15
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 31 01 	call	0x262	; 0x262 <LED_toggle>
		}
		TCNT0 = 56;
 300:	88 e3       	ldi	r24, 0x38	; 56
 302:	82 bf       	out	0x32, r24	; 50
	startTimer(T0,8);
	
	//initial value
	TCNT0 = 56;
	
	for (uint16_t i=0;  i <25000; i++)
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	c8 3a       	cpi	r28, 0xA8	; 168
 308:	81 e6       	ldi	r24, 0x61	; 97
 30a:	d8 07       	cpc	r29, r24
 30c:	80 f2       	brcs	.-96     	; 0x2ae <dely_5s_2LED+0x3c>
			LED_toggle(portNumber_2,pinNumber_2);	
		}
		TCNT0 = 56;
	}
	
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	08 95       	ret

0000031c <main>:



int main(void)
{
	AppStart();
 31c:	0e 94 86 00 	call	0x10c	; 0x10c <AppStart>
}
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 95       	ret

00000326 <DIO_init>:

#include "dio.h"

EN_errorReturn_t DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch(portNumber)
 326:	62 34       	cpi	r22, 0x42	; 66
 328:	59 f1       	breq	.+86     	; 0x380 <DIO_init+0x5a>
 32a:	18 f4       	brcc	.+6      	; 0x332 <DIO_init+0xc>
 32c:	61 34       	cpi	r22, 0x41	; 65
 32e:	41 f0       	breq	.+16     	; 0x340 <DIO_init+0x1a>
 330:	08 95       	ret
 332:	63 34       	cpi	r22, 0x43	; 67
 334:	09 f4       	brne	.+2      	; 0x338 <DIO_init+0x12>
 336:	44 c0       	rjmp	.+136    	; 0x3c0 <DIO_init+0x9a>
 338:	64 34       	cpi	r22, 0x44	; 68
 33a:	09 f4       	brne	.+2      	; 0x33e <DIO_init+0x18>
 33c:	60 c0       	rjmp	.+192    	; 0x3fe <DIO_init+0xd8>
 33e:	08 95       	ret
	{
		case PORT_A:
		if(direction == IN)
 340:	41 11       	cpse	r20, r1
 342:	0e c0       	rjmp	.+28     	; 0x360 <DIO_init+0x3a>
		{
			CLR_BIT(DDRA,pinNumber);
 344:	4a b3       	in	r20, 0x1a	; 26
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_init+0x2c>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_init+0x28>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	8a bb       	out	0x1a, r24	; 26
 35e:	08 95       	ret
			//DDRA &= ~(1<<pinNumber);
		}
		else if(direction == OUT)
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <DIO_init+0x40>
 364:	6a c0       	rjmp	.+212    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			SET_BIT(DDRA,pinNumber);
 366:	4a b3       	in	r20, 0x1a	; 26
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_init+0x4e>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_init+0x4a>
 378:	cb 01       	movw	r24, r22
 37a:	84 2b       	or	r24, r20
 37c:	8a bb       	out	0x1a, r24	; 26
 37e:	08 95       	ret
			//error handing
		}
		break;
		
		case PORT_B:
		if(direction == IN)
 380:	41 11       	cpse	r20, r1
 382:	0e c0       	rjmp	.+28     	; 0x3a0 <DIO_init+0x7a>
		{
			CLR_BIT(DDRB,pinNumber);
 384:	47 b3       	in	r20, 0x17	; 23
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0x6c>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0x68>
 396:	cb 01       	movw	r24, r22
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	87 bb       	out	0x17, r24	; 23
 39e:	08 95       	ret
			//DDRB &= ~(1<<pinNumber);
		}
		else if(direction == OUT)
 3a0:	41 30       	cpi	r20, 0x01	; 1
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <DIO_init+0x80>
 3a4:	4a c0       	rjmp	.+148    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			SET_BIT(DDRB,pinNumber);
 3a6:	47 b3       	in	r20, 0x17	; 23
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	b9 01       	movw	r22, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_init+0x8e>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_init+0x8a>
 3b8:	cb 01       	movw	r24, r22
 3ba:	84 2b       	or	r24, r20
 3bc:	87 bb       	out	0x17, r24	; 23
 3be:	08 95       	ret
			//error handing
		}
		break;
		
		case PORT_C:
		if(direction == IN)
 3c0:	41 11       	cpse	r20, r1
 3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <DIO_init+0xba>
		{
			CLR_BIT(DDRC,pinNumber);
 3c4:	44 b3       	in	r20, 0x14	; 20
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	b9 01       	movw	r22, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0xac>
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	8a 95       	dec	r24
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0xa8>
 3d6:	cb 01       	movw	r24, r22
 3d8:	80 95       	com	r24
 3da:	84 23       	and	r24, r20
 3dc:	84 bb       	out	0x14, r24	; 20
 3de:	08 95       	ret
			//DDRC &= ~(1<<pinNumber);
		}
		else if(direction == OUT)
 3e0:	41 30       	cpi	r20, 0x01	; 1
 3e2:	59 f5       	brne	.+86     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			SET_BIT(DDRC,pinNumber);
 3e4:	44 b3       	in	r20, 0x14	; 20
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	b9 01       	movw	r22, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_init+0xcc>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_init+0xc8>
 3f6:	cb 01       	movw	r24, r22
 3f8:	84 2b       	or	r24, r20
 3fa:	84 bb       	out	0x14, r24	; 20
 3fc:	08 95       	ret
			//error handing
		}
		break;
		
		case PORT_D:
		if(direction == IN)
 3fe:	41 11       	cpse	r20, r1
 400:	0e c0       	rjmp	.+28     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			CLR_BIT(DDRD,pinNumber);
 402:	41 b3       	in	r20, 0x11	; 17
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	cb 01       	movw	r24, r22
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	81 bb       	out	0x11, r24	; 17
 41c:	08 95       	ret
			//DDRD &= ~(1<<pinNumber);
		}
		else if(direction == OUT)
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	61 f4       	brne	.+24     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			SET_BIT(DDRD,pinNumber);
 422:	41 b3       	in	r20, 0x11	; 17
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	cb 01       	movw	r24, r22
 436:	84 2b       	or	r24, r20
 438:	81 bb       	out	0x11, r24	; 17
		{
			//error handing
		}
		break;
	}
}
 43a:	08 95       	ret

0000043c <DIO_write>:

EN_errorReturn_t DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
 43c:	62 34       	cpi	r22, 0x42	; 66
 43e:	69 f1       	breq	.+90     	; 0x49a <DIO_write+0x5e>
 440:	18 f4       	brcc	.+6      	; 0x448 <DIO_write+0xc>
 442:	61 34       	cpi	r22, 0x41	; 65
 444:	41 f0       	breq	.+16     	; 0x456 <DIO_write+0x1a>
 446:	8d c0       	rjmp	.+282    	; 0x562 <DIO_write+0x126>
 448:	63 34       	cpi	r22, 0x43	; 67
 44a:	09 f4       	brne	.+2      	; 0x44e <DIO_write+0x12>
 44c:	48 c0       	rjmp	.+144    	; 0x4de <DIO_write+0xa2>
 44e:	64 34       	cpi	r22, 0x44	; 68
 450:	09 f4       	brne	.+2      	; 0x454 <DIO_write+0x18>
 452:	66 c0       	rjmp	.+204    	; 0x520 <DIO_write+0xe4>
 454:	86 c0       	rjmp	.+268    	; 0x562 <DIO_write+0x126>
	{
		case PORT_A:
			if(value == LOW)
 456:	41 11       	cpse	r20, r1
 458:	0f c0       	rjmp	.+30     	; 0x478 <DIO_write+0x3c>
			{
				CLR_BIT(PORTA,pinNumber);
 45a:	4b b3       	in	r20, 0x1b	; 27
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	b9 01       	movw	r22, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_write+0x2c>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	8a 95       	dec	r24
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_write+0x28>
 46c:	cb 01       	movw	r24, r22
 46e:	80 95       	com	r24
 470:	84 23       	and	r24, r20
 472:	8b bb       	out	0x1b, r24	; 27
			else
			{
				//error handing
				return error;
			}
			return ok;
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	08 95       	ret
			if(value == LOW)
			{
				CLR_BIT(PORTA,pinNumber);
				//PORTA &= ~(1<<pinNumber);  // write 0
			}
			else if(value == HIGH)
 478:	41 30       	cpi	r20, 0x01	; 1
 47a:	09 f0       	breq	.+2      	; 0x47e <DIO_write+0x42>
 47c:	73 c0       	rjmp	.+230    	; 0x564 <DIO_write+0x128>
			{
				SET_BIT(PORTA,pinNumber);
 47e:	4b b3       	in	r20, 0x1b	; 27
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_write+0x50>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_write+0x4c>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	8b bb       	out	0x1b, r24	; 27
			else
			{
				//error handing
				return error;
			}
			return ok;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
		
		case PORT_B:
			if(value == LOW )
 49a:	41 11       	cpse	r20, r1
 49c:	0f c0       	rjmp	.+30     	; 0x4bc <DIO_write+0x80>
			{
				CLR_BIT(PORTB,pinNumber);
 49e:	48 b3       	in	r20, 0x18	; 24
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	b9 01       	movw	r22, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_write+0x70>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_write+0x6c>
 4b0:	cb 01       	movw	r24, r22
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	88 bb       	out	0x18, r24	; 24
			else
			{
				//error handing
				return error;
			}
			return ok;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
			if(value == LOW )
			{
				CLR_BIT(PORTB,pinNumber);
				//PORTB &= ~(1<<pinNumber); // write 0
			}
			else if(value == HIGH)
 4bc:	41 30       	cpi	r20, 0x01	; 1
 4be:	09 f0       	breq	.+2      	; 0x4c2 <DIO_write+0x86>
 4c0:	53 c0       	rjmp	.+166    	; 0x568 <DIO_write+0x12c>
			{
				SET_BIT(PORTB,pinNumber);
 4c2:	48 b3       	in	r20, 0x18	; 24
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	b9 01       	movw	r22, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_write+0x94>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_write+0x90>
 4d4:	cb 01       	movw	r24, r22
 4d6:	84 2b       	or	r24, r20
 4d8:	88 bb       	out	0x18, r24	; 24
			else
			{
				//error handing
				return error;
			}
			return ok;
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
		
		case PORT_C:
			if(value == LOW )
 4de:	41 11       	cpse	r20, r1
 4e0:	0f c0       	rjmp	.+30     	; 0x500 <DIO_write+0xc4>
			{
				CLR_BIT(PORTC,pinNumber);
 4e2:	45 b3       	in	r20, 0x15	; 21
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_write+0xb4>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_write+0xb0>
 4f4:	cb 01       	movw	r24, r22
 4f6:	80 95       	com	r24
 4f8:	84 23       	and	r24, r20
 4fa:	85 bb       	out	0x15, r24	; 21
			else
			{
				//error handing
				return error;
			}
			return ok;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
			if(value == LOW )
			{
				CLR_BIT(PORTC,pinNumber);
				//PORTC &= ~(1<<pinNumber); // write 0
			}
			else if(value == HIGH)
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	a1 f5       	brne	.+104    	; 0x56c <DIO_write+0x130>
			{
				SET_BIT(PORTC,pinNumber);
 504:	45 b3       	in	r20, 0x15	; 21
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	b9 01       	movw	r22, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_write+0xd6>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	8a 95       	dec	r24
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_write+0xd2>
 516:	cb 01       	movw	r24, r22
 518:	84 2b       	or	r24, r20
 51a:	85 bb       	out	0x15, r24	; 21
			else
			{
				//error handing
				return error;
			}
			return ok;
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	08 95       	ret
		
		case PORT_D:
		if(value == LOW )
 520:	41 11       	cpse	r20, r1
 522:	0f c0       	rjmp	.+30     	; 0x542 <DIO_write+0x106>
		{
			CLR_BIT(PORTD,pinNumber);
 524:	42 b3       	in	r20, 0x12	; 18
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	b9 01       	movw	r22, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_write+0xf6>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	8a 95       	dec	r24
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_write+0xf2>
 536:	cb 01       	movw	r24, r22
 538:	80 95       	com	r24
 53a:	84 23       	and	r24, r20
 53c:	82 bb       	out	0x12, r24	; 18
		else
		{
			//error handing
			return error;
		}
		return ok;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
		if(value == LOW )
		{
			CLR_BIT(PORTD,pinNumber);
			//PORTD &= ~(1<<pinNumber); // write 0
		}
		else if(value == HIGH)
 542:	41 30       	cpi	r20, 0x01	; 1
 544:	a9 f4       	brne	.+42     	; 0x570 <DIO_write+0x134>
		{
			SET_BIT(PORTD,pinNumber);
 546:	42 b3       	in	r20, 0x12	; 18
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	b9 01       	movw	r22, r18
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_write+0x118>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	8a 95       	dec	r24
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_write+0x114>
 558:	cb 01       	movw	r24, r22
 55a:	84 2b       	or	r24, r20
 55c:	82 bb       	out	0x12, r24	; 18
		else
		{
			//error handing
			return error;
		}
		return ok;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
	}
}
 562:	08 95       	ret
				//PORTA |= (1<<pinNumber); // write 1
			}
			else
			{
				//error handing
				return error;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	08 95       	ret
				//PORTB |= (1<<pinNumber); // write 1
			}
			else
			{
				//error handing
				return error;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	08 95       	ret
				//PORTC |= (1<<pinNumber); // write 1
			}
			else
			{
				//error handing
				return error;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret
			//PORTD |= (1<<pinNumber); // write 1
		}
		else
		{
			//error handing
			return error;
 570:	81 e0       	ldi	r24, 0x01	; 1
		}
		return ok;
	}
}
 572:	08 95       	ret

00000574 <DIO_toggle>:

EN_errorReturn_t DIO_toggle(uint8_t pinNumber, uint8_t portNumber)
{
	switch(portNumber)
 574:	62 34       	cpi	r22, 0x42	; 66
 576:	b9 f0       	breq	.+46     	; 0x5a6 <DIO_toggle+0x32>
 578:	18 f4       	brcc	.+6      	; 0x580 <DIO_toggle+0xc>
 57a:	61 34       	cpi	r22, 0x41	; 65
 57c:	31 f0       	breq	.+12     	; 0x58a <DIO_toggle+0x16>
 57e:	3d c0       	rjmp	.+122    	; 0x5fa <DIO_toggle+0x86>
 580:	63 34       	cpi	r22, 0x43	; 67
 582:	f9 f0       	breq	.+62     	; 0x5c2 <DIO_toggle+0x4e>
 584:	64 34       	cpi	r22, 0x44	; 68
 586:	59 f1       	breq	.+86     	; 0x5de <DIO_toggle+0x6a>
 588:	38 c0       	rjmp	.+112    	; 0x5fa <DIO_toggle+0x86>
	{
		case PORT_A:
		TOG_BIT(PORTA,pinNumber);
 58a:	4b b3       	in	r20, 0x1b	; 27
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	b9 01       	movw	r22, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_toggle+0x24>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	8a 95       	dec	r24
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_toggle+0x20>
 59c:	cb 01       	movw	r24, r22
 59e:	84 27       	eor	r24, r20
 5a0:	8b bb       	out	0x1b, r24	; 27
		//PORTA^=(1<<pinNumber);
		return ok;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	08 95       	ret
		case PORT_B:
		TOG_BIT(PORTB,pinNumber);
 5a6:	48 b3       	in	r20, 0x18	; 24
 5a8:	21 e0       	ldi	r18, 0x01	; 1
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	b9 01       	movw	r22, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_toggle+0x40>
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	8a 95       	dec	r24
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_toggle+0x3c>
 5b8:	cb 01       	movw	r24, r22
 5ba:	84 27       	eor	r24, r20
 5bc:	88 bb       	out	0x18, r24	; 24
		//PORTB^=(1<<pinNumber);
		return ok;
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
		case PORT_C:
		TOG_BIT(PORTC,pinNumber);
 5c2:	45 b3       	in	r20, 0x15	; 21
 5c4:	21 e0       	ldi	r18, 0x01	; 1
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	b9 01       	movw	r22, r18
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_toggle+0x5c>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	8a 95       	dec	r24
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_toggle+0x58>
 5d4:	cb 01       	movw	r24, r22
 5d6:	84 27       	eor	r24, r20
 5d8:	85 bb       	out	0x15, r24	; 21
		//PORTC^=(1<<pinNumber);
		return ok;
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret
		case PORT_D:
		TOG_BIT(PORTD,pinNumber);
 5de:	42 b3       	in	r20, 0x12	; 18
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_toggle+0x78>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_toggle+0x74>
 5f0:	cb 01       	movw	r24, r22
 5f2:	84 27       	eor	r24, r20
 5f4:	82 bb       	out	0x12, r24	; 18
		//PORTD^=(1<<pinNumber);
		return ok;
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret
		default:
		return error;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
		
	}
}
 5fc:	08 95       	ret

000005fe <EXT0_Set_Edge>:

#include "interrupt.h"

static EN_errorReturn_t EXT0_Set_Edge(const ST_externalInterrupt_t* interrupt)
{
	if(interrupt == NULL)
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	11 f4       	brne	.+4      	; 0x606 <EXT0_Set_Edge+0x8>
	{
		return error;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
	}
	else
	{
		switch(interrupt->source)
 606:	fc 01       	movw	r30, r24
 608:	20 81       	ld	r18, Z
 60a:	21 11       	cpse	r18, r1
 60c:	18 c0       	rjmp	.+48     	; 0x63e <EXT0_Set_Edge+0x40>
		{
			case EXTERNAL_INTERRUPT_0 :
				{
					switch(interrupt->edge)
 60e:	81 81       	ldd	r24, Z+1	; 0x01
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	51 f0       	breq	.+20     	; 0x628 <EXT0_Set_Edge+0x2a>
 614:	28 f0       	brcs	.+10     	; 0x620 <EXT0_Set_Edge+0x22>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	59 f0       	breq	.+22     	; 0x630 <EXT0_Set_Edge+0x32>
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	69 f0       	breq	.+26     	; 0x638 <EXT0_Set_Edge+0x3a>
 61e:	0f c0       	rjmp	.+30     	; 0x63e <EXT0_Set_Edge+0x40>
					{
						case EXI_INT0_GENERATE_INTERRUPT_AT_LOW_LEVEL :
							EXI_INT0_SET_EDGE(interrupt->edge);
 620:	95 b7       	in	r25, 0x35	; 53
 622:	89 2b       	or	r24, r25
 624:	85 bf       	out	0x35, r24	; 53
							break;
 626:	0b c0       	rjmp	.+22     	; 0x63e <EXT0_Set_Edge+0x40>
							
						case EXI_INT0_GENERATE_INTERRUPT_AT_HIGH_LEVEL:
							EXI_INT0_SET_EDGE(interrupt->edge);
 628:	95 b7       	in	r25, 0x35	; 53
 62a:	89 2b       	or	r24, r25
 62c:	85 bf       	out	0x35, r24	; 53
							break;
 62e:	07 c0       	rjmp	.+14     	; 0x63e <EXT0_Set_Edge+0x40>
						
						case EXI_INT0_GENERATE_INTERRUPT_AT_FALLING_EDGE :
							EXI_INT0_SET_EDGE(interrupt->edge);
 630:	95 b7       	in	r25, 0x35	; 53
 632:	89 2b       	or	r24, r25
 634:	85 bf       	out	0x35, r24	; 53
							break;
 636:	03 c0       	rjmp	.+6      	; 0x63e <EXT0_Set_Edge+0x40>
						
						case EXI_INT0_GENERATE_INTERRUPT_AT_RISING_EDGE :
							EXI_INT0_SET_EDGE(interrupt->edge);
 638:	95 b7       	in	r25, 0x35	; 53
 63a:	89 2b       	or	r24, r25
 63c:	85 bf       	out	0x35, r24	; 53
					}
				}
				break;
		}
	}
}
 63e:	08 95       	ret

00000640 <EXT0_Set_Source>:

static EN_errorReturn_t EXT0_Set_Source(const ST_externalInterrupt_t* interrupt)
{
	if(interrupt == NULL)
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	11 f4       	brne	.+4      	; 0x648 <EXT0_Set_Source+0x8>
	{
		return error;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	08 95       	ret
	}
	else
	{
		switch(interrupt->source)
 648:	fc 01       	movw	r30, r24
 64a:	80 81       	ld	r24, Z
 64c:	81 11       	cpse	r24, r1
 64e:	03 c0       	rjmp	.+6      	; 0x656 <EXT0_Set_Source+0x16>
		{
			case EXTERNAL_INTERRUPT_0:
				SET_BIT(GICR, 6);
 650:	8b b7       	in	r24, 0x3b	; 59
 652:	80 64       	ori	r24, 0x40	; 64
 654:	8b bf       	out	0x3b, r24	; 59
				break;
				
		}
	}
}
 656:	08 95       	ret

00000658 <External_Interrupt_Init>:

static void(*external_interrupt_0_call_back) (void) = NULL;


EN_errorReturn_t External_Interrupt_Init(const ST_externalInterrupt_t* interrupt)
{
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
	if(interrupt == NULL)
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	41 f0       	breq	.+16     	; 0x670 <External_Interrupt_Init+0x18>
 660:	ec 01       	movw	r28, r24
	{
		return error;
	}
	else
	{
		EXT0_Set_Edge(interrupt);
 662:	0e 94 ff 02 	call	0x5fe	; 0x5fe <EXT0_Set_Edge>
		EXT0_Set_Source(interrupt);
 666:	ce 01       	movw	r24, r28
 668:	0e 94 20 03 	call	0x640	; 0x640 <EXT0_Set_Source>
	}
	return ok;
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	01 c0       	rjmp	.+2      	; 0x672 <External_Interrupt_Init+0x1a>

EN_errorReturn_t External_Interrupt_Init(const ST_externalInterrupt_t* interrupt)
{
	if(interrupt == NULL)
	{
		return error;
 670:	81 e0       	ldi	r24, 0x01	; 1
	{
		EXT0_Set_Edge(interrupt);
		EXT0_Set_Source(interrupt);
	}
	return ok;
}
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <External_Interrupt_Call_Back>:


EN_errorReturn_t External_Interrupt_Call_Back(const ST_externalInterrupt_t* interrupt)
{
	if(interrupt == NULL)
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	11 f4       	brne	.+4      	; 0x680 <External_Interrupt_Call_Back+0x8>
	{
		return error;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	08 95       	ret
	}
	else
	{
		switch(interrupt->source)
 680:	fc 01       	movw	r30, r24
 682:	20 81       	ld	r18, Z
 684:	21 11       	cpse	r18, r1
 686:	06 c0       	rjmp	.+12     	; 0x694 <External_Interrupt_Call_Back+0x1c>
		{
			case EXTERNAL_INTERRUPT_0:
				external_interrupt_0_call_back = interrupt->external_Interrupt_0_Request;
 688:	82 81       	ldd	r24, Z+2	; 0x02
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 690:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
				break;
		}
	}
}
 694:	08 95       	ret

00000696 <__vector_1>:


ISR(INT0_vect)
{
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	2f 93       	push	r18
 6a2:	3f 93       	push	r19
 6a4:	4f 93       	push	r20
 6a6:	5f 93       	push	r21
 6a8:	6f 93       	push	r22
 6aa:	7f 93       	push	r23
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	af 93       	push	r26
 6b2:	bf 93       	push	r27
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
	if(external_interrupt_0_call_back != NULL)
 6b8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 6bc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 6c0:	30 97       	sbiw	r30, 0x00	; 0
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <__vector_1+0x30>
	{
		external_interrupt_0_call_back();
 6c4:	09 95       	icall
	}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <startTimer>:
		
		default:
		return error;
	}
	
}
 6e8:	67 2b       	or	r22, r23
 6ea:	68 2b       	or	r22, r24
 6ec:	69 2b       	or	r22, r25
 6ee:	b1 f5       	brne	.+108    	; 0x75c <startTimer+0x74>
 6f0:	21 15       	cp	r18, r1
 6f2:	31 05       	cpc	r19, r1
 6f4:	41 05       	cpc	r20, r1
 6f6:	51 05       	cpc	r21, r1
 6f8:	29 f4       	brne	.+10     	; 0x704 <startTimer+0x1c>
 6fa:	83 b7       	in	r24, 0x33	; 51
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	83 bf       	out	0x33, r24	; 51
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
 704:	28 30       	cpi	r18, 0x08	; 8
 706:	31 05       	cpc	r19, r1
 708:	41 05       	cpc	r20, r1
 70a:	51 05       	cpc	r21, r1
 70c:	29 f4       	brne	.+10     	; 0x718 <startTimer+0x30>
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	82 60       	ori	r24, 0x02	; 2
 712:	83 bf       	out	0x33, r24	; 51
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
 718:	20 34       	cpi	r18, 0x40	; 64
 71a:	31 05       	cpc	r19, r1
 71c:	41 05       	cpc	r20, r1
 71e:	51 05       	cpc	r21, r1
 720:	41 f4       	brne	.+16     	; 0x732 <startTimer+0x4a>
 722:	83 b7       	in	r24, 0x33	; 51
 724:	81 60       	ori	r24, 0x01	; 1
 726:	83 bf       	out	0x33, r24	; 51
 728:	83 b7       	in	r24, 0x33	; 51
 72a:	82 60       	ori	r24, 0x02	; 2
 72c:	83 bf       	out	0x33, r24	; 51
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
 732:	21 15       	cp	r18, r1
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	38 07       	cpc	r19, r24
 738:	41 05       	cpc	r20, r1
 73a:	51 05       	cpc	r21, r1
 73c:	29 f4       	brne	.+10     	; 0x748 <startTimer+0x60>
 73e:	83 b7       	in	r24, 0x33	; 51
 740:	84 60       	ori	r24, 0x04	; 4
 742:	83 bf       	out	0x33, r24	; 51
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	08 95       	ret
 748:	21 15       	cp	r18, r1
 74a:	34 40       	sbci	r19, 0x04	; 4
 74c:	41 05       	cpc	r20, r1
 74e:	51 05       	cpc	r21, r1
 750:	39 f4       	brne	.+14     	; 0x760 <startTimer+0x78>
 752:	83 b7       	in	r24, 0x33	; 51
 754:	81 60       	ori	r24, 0x01	; 1
 756:	83 bf       	out	0x33, r24	; 51
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	08 95       	ret
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	08 95       	ret

00000764 <dely_5s>:

void dely_5s()
{
	CLR_BIT(TCCR0,WGM00);
 764:	83 b7       	in	r24, 0x33	; 51
 766:	8f 7b       	andi	r24, 0xBF	; 191
 768:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,WGM01);
 76a:	83 b7       	in	r24, 0x33	; 51
 76c:	87 7f       	andi	r24, 0xF7	; 247
 76e:	83 bf       	out	0x33, r24	; 51
	
	//SET PRESCALLER 
	startTimer(T0,8);
 770:	28 e0       	ldi	r18, 0x08	; 8
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	cb 01       	movw	r24, r22
 77e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <startTimer>
	
	//initial value 
	TCNT0 = 56;
 782:	88 e3       	ldi	r24, 0x38	; 56
 784:	82 bf       	out	0x32, r24	; 50
	
	for (uint16_t i=0;  i <25000; i++)
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	07 c0       	rjmp	.+14     	; 0x79a <dely_5s+0x36>
	{
		while(TCNT0);
 78c:	82 b7       	in	r24, 0x32	; 50
 78e:	81 11       	cpse	r24, r1
 790:	fd cf       	rjmp	.-6      	; 0x78c <dely_5s+0x28>
		TCNT0 = 56;
 792:	88 e3       	ldi	r24, 0x38	; 56
 794:	82 bf       	out	0x32, r24	; 50
	startTimer(T0,8);
	
	//initial value 
	TCNT0 = 56;
	
	for (uint16_t i=0;  i <25000; i++)
 796:	2f 5f       	subi	r18, 0xFF	; 255
 798:	3f 4f       	sbci	r19, 0xFF	; 255
 79a:	28 3a       	cpi	r18, 0xA8	; 168
 79c:	81 e6       	ldi	r24, 0x61	; 97
 79e:	38 07       	cpc	r19, r24
 7a0:	a8 f3       	brcs	.-22     	; 0x78c <dely_5s+0x28>
	{
		while(TCNT0);
		TCNT0 = 56;
	}
	
 7a2:	08 95       	ret

000007a4 <__umulhisi3>:
 7a4:	a2 9f       	mul	r26, r18
 7a6:	b0 01       	movw	r22, r0
 7a8:	b3 9f       	mul	r27, r19
 7aa:	c0 01       	movw	r24, r0
 7ac:	a3 9f       	mul	r26, r19
 7ae:	70 0d       	add	r23, r0
 7b0:	81 1d       	adc	r24, r1
 7b2:	11 24       	eor	r1, r1
 7b4:	91 1d       	adc	r25, r1
 7b6:	b2 9f       	mul	r27, r18
 7b8:	70 0d       	add	r23, r0
 7ba:	81 1d       	adc	r24, r1
 7bc:	11 24       	eor	r1, r1
 7be:	91 1d       	adc	r25, r1
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
